<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.lab.hosaily.core.sell.dao.mapper.OrderMapper">
    <resultMap id="order" type="com.lab.hosaily.core.sell.entity.Order">
        <id     column="id"             property="id"            javaType="java.lang.String"/>
        <result column="order_id"       property="orderId"       javaType="java.lang.String"/>
        <result column="sales_account"  property="salesAccount"  javaType="java.lang.String"/>
        <result column="client_account" property="clientAccount" javaType="java.lang.String"/>
        <result column="price"          property="price"         javaType="java.lang.Double"/>
        <result column="pay"            property="pay"           javaType="java.lang.Double"/>
        <result column="remark"         property="remark"        javaType="java.lang.String"/>
        <result column="state"          property="state"         typeHandler="usingStateHandler"/>
        <result column="is_delete"      property="isDelete"      javaType="java.lang.Boolean"/>
        <result column="create_time"    property="createTime"    javaType="java.util.Date"/>
        <result column="update_time"    property="updateTime"    javaType="java.util.Date"/>
        <result column="delete_time"    property="deleteTime"    javaType="java.util.Date"/>
        <association property="salesUser"  resultMap="user" columnPrefix="su_"/>
        <association property="clientUser" resultMap="user" column="cu_"/>
    </resultMap>

    <resultMap id="user" type="com.rab.babylon.core.account.entity.User">
        <id     column="id"           property="id"         javaType="java.lang.String"/>
        <result column="account_id"   property="accountId"  javaType="java.lang.String"/>
        <result column="nickname"     property="nickname"   javaType="java.lang.String"/>
        <result column="name"         property="name"       javaType="java.lang.String"/>
        <result column="code"         property="code"       javaType="java.lang.Integer"/>
    </resultMap>

    <sql id="WHERE_COLUMN">
        <where>
            <if test="params.andCreiterions != null and params.andCreiterions.size > 0">
                <foreach collection="params.andCreiterions" item="criterion" separator="AND">
                    <trim prefix="(" suffix=")">
                        <choose>
                            <when test="criterion.noValue">
                                ${criterion.property} ${criterion.operator}
                            </when>
                            <when test="criterion.singleValue">
                                ${criterion.property} ${criterion.operator} #{criterion.value}
                            </when>
                            <when test="criterion.betweenValue">
                                ${criterion.property} ${criterion.operator} #{criterion.value} AND #{criterion.secondValue}
                            </when>
                            <when test="criterion.listValue">
                                ${criterion.property} ${criterion.operator}
                                <foreach collection="criterion.value" item="item" open="(" close=")" separator=",">
                                    #{item}
                                </foreach>
                            </when>
                            <when test="criterion.criterionValue">
                                <foreach collection="criterion.value" item="item" open="(" close=")" separator="criterion.operator">
                                    <trim prefix="(" suffix=")">
                                        <choose>
                                            <when test="item.noValue">
                                                ${item.property} ${item.operator}
                                            </when>
                                            <when test="item.singleValue">
                                                ${item.property} ${item.operator} #{item.value}
                                            </when>
                                            <when test="item.betweenValue">
                                                ${item.property} ${item.operator} #{item.value} AND #{item.secondValue}
                                            </when>
                                            <when test="item.listValue">
                                                ${item.property} ${item.operator}
                                                <foreach collection="item.value" item="listItem" open="(" close=")" separator=",">
                                                    #{listItem}
                                                </foreach>
                                            </when>
                                        </choose>
                                    </trim>
                                </foreach>
                            </when>
                        </choose>
                    </trim>
                </foreach>
            </if>

            <if test="params.orCreiterions != null and params.orCreiterions.size > 0">
                <foreach collection="params.orCreiterions" item="criterion" separator="OR">
                    <trim prefix="(" suffix=")">
                        <choose>
                            <when test="criterion.noValue">
                                ${criterion.property} ${criterion.operator}
                            </when>
                            <when test="criterion.singleValue">
                                ${criterion.property} ${criterion.operator} #{criterion.value}
                            </when>
                            <when test="criterion.betweenValue">
                                ${criterion.property} ${criterion.operator} #{criterion.value} AND #{criterion.secondValue}
                            </when>
                            <when test="criterion.listValue">
                                ${criterion.property} ${criterion.operator}
                                <foreach collection="criterion.value" item="item" open="(" close=")" separator=",">
                                    #{item}
                                </foreach>
                            </when>
                            <when test="criterion.criterionValue">
                                <foreach collection="criterion.value" item="item" open="(" close=")" separator="criterion.operator">
                                    <trim prefix="(" suffix=")">
                                        <choose>
                                            <when test="item.noValue">
                                                ${item.property} ${item.operator}
                                            </when>
                                            <when test="item.singleValue">
                                                ${item.property} ${item.operator} #{item.value}
                                            </when>
                                            <when test="item.betweenValue">
                                                ${item.property} ${item.operator} #{item.value} AND #{item.secondValue}
                                            </when>
                                            <when test="item.listValue">
                                                ${item.property} ${item.operator}
                                                <foreach collection="item.value" item="listItem" open="(" close=")" separator=",">
                                                    #{listItem}
                                                </foreach>
                                            </when>
                                        </choose>
                                    </trim>
                                </foreach>
                            </when>
                        </choose>
                    </trim>
                </foreach>
            </if>
        </where>
    </sql>

    <insert id="save">
        INSERT
          INTO order (
               id,
               order_id,
               sales_account,
               sales_user,
               client_account,
               client_user,
               price,
               pay,
               remark,
               state,
               is_delete,
               create_time
        ) VALUE(
               #{id,            jdbcType=VARCHAR},
               #{orderId,       jdbcType=VARCHAR},
               #{salesAccount,  jdbcType=VARCHAR},
               #{salesUser.id,  jdbcType=VARCHAR},
               #{clientAccount, jdbcType=VARCHAR},
               #{clientUser.id, jdbcType=VARCHAR},
               #{price,         jdbcType=DOUBLE},
               #{pay,           jdbcType=DOUBEL},
               #{remark,        jdbcType=VARCHAR},
               #{state,         typeHandler=usingStateHandler},
               #{isDelete,      jdbcType=BOOLEAN},
               #{createTime,    jdbcType=TIMESTAMP}
        )
    </insert>

    <update id="update">
        UPDATE order
         <set>
             <if test="price != null and price >= 0">
                 price = #{price, jdbcType=DOUBLE},
             </if>
             <if test="pay != null and pay >= 0">
                 pay = #{pay, jdbcType=DOUBLE},
             </if>
             <if test="remark != null and remark != ''">
                 remark = #{remark, jdbcType=VARCHAR},
             </if>
             <if test="state != null">
                 state = #{state, typeHandler=usingState},
             </if>
             <if test="updateTime != null">
                 update_time = #{updateTime, jdbcType=TIMESTAMP},
             </if>
         </set>
          WHERE id = #{id}
    </update>

    <update id="delete">
        UPDATE order
           SET is_delete = TRUE,
               delete_time = NOW()
         WHERE id = #{id}
    </update>

    <select id="getByParams" resultMap="order">
        SELECT o.*,
               su.id       AS su_id,
               su.name     AS su_name,
               su.nickname AS su_nickname,
               su.code     AS su_code,
               cu.id       AS cu_id,
               cu.name     AS cu_name,
               cu.nickname AS cu_nickname,
               cu.code     AS cu_code
     LEFT JOIN user su
            ON su.account_id = o.sales_account
     LEFT JOIN user cu
            ON cu.account_id = o.client_account
        <if test="params != null">
            <include refid="WHERE_COLUMN"/>
        </if>
    </select>

    <select id="findIdByParams" resultType="java.lang.String">
        SELECT o.id,
     LEFT JOIN user su
            ON su.account_id = o.sales_account
     LEFT JOIN user cu
            ON cu.account_id = o.client_account
        <if test="params != null">
            <include refid="WHERE_COLUMN"/>

            <if test="params.groups != null and params.groups.size > 0">
                GROUP BY
                <foreach collection="params.groups" item="group" separator=",">
                    ${group.property}
                </foreach>
            </if>

            <if test="params.sorts != null and params.sorts.size > 0">
                ORDER BY
                <foreach collection="params.sorts" item="sort" separator=",">
                    ${sort.property} ${sort.operator}
                </foreach>
            </if>

            <if test="params.limit != null">
                ${params.limit.operator} ${params.limit.value}, ${params.limit.secondValue}
            </if>
        </if>
    </select>

    <select id="findByParams" resultMap="order">
        SELECT o.*,
               su.id       AS su_id,
               su.name     AS su_name,
               su.nickname AS su_nickname,
               su.code     AS su_code,
               cu.id       AS cu_id,
               cu.name     AS cu_name,
               cu.nickname AS cu_nickname,
               cu.code     AS cu_code
     LEFT JOIN user su
            ON su.account_id = o.sales_account
     LEFT JOIN user cu
            ON cu.account_id = o.client_account
        <if test="params != null">
            <include refid="WHERE_COLUMN"/>

            <if test="params.sorts != null and params.sorts.size > 0">
                ORDER BY
                <foreach collection="params.sorts" item="sort" separator=",">
                    ${sort.property} ${sort.operator}
                </foreach>
            </if>

            <if test="params.limit != null">
                ${params.limit.operator} ${params.limit.value}, ${params.limit.secondValue}
            </if>
        </if>
    </select>

    <select id="countByParams" resultType="java.lang.Long">
        SELECT COUNT(*)
          FROM (
                  SELECT o.id,
             LEFT JOIN user su
                    ON su.account_id = o.sales_account
             LEFT JOIN user cu
                    ON cu.account_id = o.client_account
                <if test="params != null">
                    <include refid="WHERE_COLUMN"/>

                    <if test="params.groups != null and params.groups.size > 0">
                        GROUP BY
                        <foreach collection="params.groups" item="group" separator=",">
                            ${group.property}
                        </foreach>
                    </if>

                    <if test="params.sorts != null and params.sorts.size > 0">
                        ORDER BY
                        <foreach collection="params.sorts" item="sort" separator=",">
                            ${sort.property} ${sort.operator}
                        </foreach>
                    </if>

                    <if test="params.limit != null">
                        ${params.limit.operator} ${params.limit.value}, ${params.limit.secondValue}
                    </if>
                </if>
        ) AS order
    </select>
</mapper>