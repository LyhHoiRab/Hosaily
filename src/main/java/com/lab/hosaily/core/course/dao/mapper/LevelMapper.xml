<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.lab.hosaily.core.course.dao.mapper.LevelMapper">
    <resultMap id="level" type="com.lab.hosaily.core.course.entity.Level">
        <id     column="id"          property="id"          javaType="java.lang.String"/>
        <result column="name"        property="name"        javaType="java.lang.String"/>
        <result column="icon"        property="icon"        javaType="java.lang.String"/>
        <result column="description" property="description" javaType="java.lang.String"/>
        <result column="state"       property="state"       typeHandler="usingStateHandler"/>
        <result column="is_delete"   property="isDelete"    javaType="java.lang.Boolean"/>
        <result column="create_time" property="createTime"  javaType="java.util.Date"/>
        <result column="update_time" property="updateTime"  javaType="java.util.Date"/>
        <result column="delete_time" property="deleteTime"  javaType="java.util.Date"/>
        <collection property="price" resultMap="price" columnPrefix="p_"/>
    </resultMap>

    <resultMap id="price" type="com.lab.hosaily.core.course.entity.LevelPrice">
        <id     column="id"          property="id"         javaType="java.lang.String"/>
        <result column="level_id"    property="levelId"    javaType="java.lang.String"/>
        <result column="price"       property="price"      javaType="java.lang.Double"/>
        <result column="effective"   property="effective"  javaType="java.lang.Integer"/>
        <result column="state"       property="state"      typeHandler="usingStateHandler"/>
    </resultMap>

    <sql id="WHERE_COLUMN">
        <where>
            <if test="params.andCreiterions != null and params.andCreiterions.size > 0">
                <foreach collection="params.andCreiterions" item="criterion" separator="AND">
                    <trim prefix="(" suffix=")">
                        <choose>
                            <when test="criterion.noValue">
                                ${criterion.property} ${criterion.operator}
                            </when>
                            <when test="criterion.singleValue">
                                ${criterion.property} ${criterion.operator} #{criterion.value}
                            </when>
                            <when test="criterion.betweenValue">
                                ${criterion.property} ${criterion.operator} #{criterion.value} AND #{criterion.secondValue}
                            </when>
                            <when test="criterion.listValue">
                                ${criterion.property} ${criterion.operator}
                                <foreach collection="criterion.value" item="item" open="(" close=")" separator=",">
                                    #{item}
                                </foreach>
                            </when>
                            <when test="criterion.criterionValue">
                                <foreach collection="criterion.value" item="item" open="(" close=")" separator="criterion.operator">
                                    <trim prefix="(" suffix=")">
                                        <choose>
                                            <when test="item.noValue">
                                                ${item.property} ${item.operator}
                                            </when>
                                            <when test="item.singleValue">
                                                ${item.property} ${item.operator} #{item.value}
                                            </when>
                                            <when test="item.betweenValue">
                                                ${item.property} ${item.operator} #{item.value} AND #{item.secondValue}
                                            </when>
                                            <when test="item.listValue">
                                                ${item.property} ${item.operator}
                                                <foreach collection="item.value" item="listItem" open="(" close=")" separator=",">
                                                    #{listItem}
                                                </foreach>
                                            </when>
                                        </choose>
                                    </trim>
                                </foreach>
                            </when>
                        </choose>
                    </trim>
                </foreach>
            </if>

            <if test="params.orCreiterions != null and params.orCreiterions.size > 0">
                <foreach collection="params.orCreiterions" item="criterion" separator="OR">
                    <trim prefix="(" suffix=")">
                        <choose>
                            <when test="criterion.noValue">
                                ${criterion.property} ${criterion.operator}
                            </when>
                            <when test="criterion.singleValue">
                                ${criterion.property} ${criterion.operator} #{criterion.value}
                            </when>
                            <when test="criterion.betweenValue">
                                ${criterion.property} ${criterion.operator} #{criterion.value} AND #{criterion.secondValue}
                            </when>
                            <when test="criterion.listValue">
                                ${criterion.property} ${criterion.operator}
                                <foreach collection="criterion.value" item="item" open="(" close=")" separator=",">
                                    #{item}
                                </foreach>
                            </when>
                            <when test="criterion.criterionValue">
                                <foreach collection="criterion.value" item="item" open="(" close=")" separator="criterion.operator">
                                    <trim prefix="(" suffix=")">
                                        <choose>
                                            <when test="item.noValue">
                                                ${item.property} ${item.operator}
                                            </when>
                                            <when test="item.singleValue">
                                                ${item.property} ${item.operator} #{item.value}
                                            </when>
                                            <when test="item.betweenValue">
                                                ${item.property} ${item.operator} #{item.value} AND #{item.secondValue}
                                            </when>
                                            <when test="item.listValue">
                                                ${item.property} ${item.operator}
                                                <foreach collection="item.value" item="listItem" open="(" close=")" separator=",">
                                                    #{listItem}
                                                </foreach>
                                            </when>
                                        </choose>
                                    </trim>
                                </foreach>
                            </when>
                        </choose>
                    </trim>
                </foreach>
            </if>
        </where>
    </sql>

    <insert id="save">
        INSERT
          INTO level (
              id,
              name,
              icon,
              description,
              state,
              is_delete,
              create_time
          ) VALUE (
              #{id,          jdbcType=VARCHAR},
              #{name,        jdbcType=VARCHAR},
              #{icon,        jdbcType=VARCHAR},
              #{description, jdbcType=VARCHAR},
              #{state,       typeHandler=usingStateHandler},
              #{isDelete,    jdbcType=BOOLEAN},
              #{createTime,  jdbcType=TIMESTAMP}
          )
    </insert>

    <update id="update">
        UPDATE level
         <set>
             <if test="name != null and name != ''">
                 name = #{name, jdbcType=VARCHAR},
             </if>
             <if test="icon != null and icon != ''">
                 icon = #{icon, jdbcType=VARCHAR},
             </if>
             <if test="description != null and description != ''">
                 description = #{description, jdbcType=VARCHAR},
             </if>
             <if test="state != null">
                 state = #{state, typeHandler=usingStateHandler},
             </if>
             <if test="isDelete != null">
                 is_delete = #{isDelete, jdbcType=BOOLEAN},
             </if>
             <if test="updateTime != null">
                 update_time = #{updateTime, jdbcType=TIMESTAMP},
             </if>
             <if test="deleteTime != null">
                 delete_time = #{deleteTime, jdbcType=TIMESTAMP},
             </if>
         </set>
          WHERE id = #{id}
    </update>

    <select id="findIdByParams" resultMap="level">
        SELECT l.id
          FROM level l
     LEFT JOIN level_price p
            ON p.level_id = l.id
        <if test="params != null">
            <include refid="WHERE_COLUMN"/>

            <if test="params.groups != null and params.groups.size > 0">
                GROUP BY
                <foreach collection="params.groups" item="group" separator=",">
                    ${group.property}
                </foreach>
            </if>

            <if test="params.sorts != null and params.sorts.size > 0">
                ORDER BY
                <foreach collection="params.sorts" item="sort" separator=",">
                    ${sort.property} ${sort.operator}
                </foreach>
            </if>

            <if test="params.limit != null">
                ${params.limit.operator} ${params.limit.value}, ${params.limit.secondValue}
            </if>
        </if>
    </select>

    <select id="findByParams" resultMap="level">
        SELECT l.*,
               p.id        AS p_id,
               p.price     AS p_price,
               p.effective AS p_effective,
               p.level_id  AS p_level_id
          FROM level l
     LEFT JOIN level_price p
            ON p.level_id = l.id
        <if test="params != null">
            <include refid="WHERE_COLUMN"/>

            <if test="params.groups != null and params.groups.size > 0">
                GROUP BY
                <foreach collection="params.groups" item="group" separator=",">
                    ${group.property}
                </foreach>
            </if>

            <if test="params.sorts != null and params.sorts.size > 0">
                ORDER BY
                <foreach collection="params.sorts" item="sort" separator=",">
                    ${sort.property} ${sort.operator}
                </foreach>
            </if>

            <if test="params.limit != null">
                ${params.limit.operator} ${params.limit.value}, ${params.limit.secondValue}
            </if>
        </if>
    </select>

    <select id="countByParams" resultType="java.lang.Long">
        SELECT COUNT(*)
          FROM (
                  SELECT l.id
                    FROM level l
               LEFT JOIN level_price p
                      ON p.level_id = l.id
                <if test="params != null">
                    <include refid="WHERE_COLUMN"/>

                    <if test="params.groups != null and params.groups.size > 0">
                        GROUP BY
                        <foreach collection="params.groups" item="group" separator=",">
                            ${group.property}
                        </foreach>
                    </if>
                </if>
        ) AS level
    </select>

    <select id="getByParams" resultMap="level">
        SELECT l.*,
               p.id        AS p_id,
               p.price     AS p_price,
               p.effective AS p_effective,
               p.level_id  AS p_level_id
          FROM level l
     LEFT JOIN level_price p
            ON p.level_id = l.id
        <if test="params != null">
            <include refid="WHERE_COLUMN"/>
        </if>
    </select>
</mapper>