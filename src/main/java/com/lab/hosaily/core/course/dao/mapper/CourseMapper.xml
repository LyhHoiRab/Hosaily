<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.lab.hosaily.core.course.dao.mapper.CourseMapper">
    <resultMap id="course" type="com.lab.hosaily.core.course.entity.Course">
        <id     column="id"           property="id"           javaType="java.lang.String"/>
        <result column="type"         property="type"         typeHandler="courseTypeHandler"/>
        <result column="title"        property="title"        javaType="java.lang.String"/>
        <result column="introduction" property="introduction" javaType="java.lang.String"/>
        <result column="cover"        property="cover"        javaType="java.lang.String"/>
        <result column="price"        property="price"        javaType="java.lang.Double"/>
        <result column="likes"        property="likes"        javaType="java.lang.Integer"/>
        <result column="view"         property="view"         javaType="java.lang.Integer"/>
        <result column="weight"       property="weight"       javaType="java.lang.Integer"/>
        <result column="parent_id"    property="parentId"     javaType="java.lang.String"/>
        <result column="state"        property="state"        typeHandler="usingStateHandler"/>
        <result column="create_time"  property="createTime"   javaType="java.util.Date"/>
        <result column="update_time"  property="updateTime"   javaType="java.util.Date"/>
        <association property="advisor"  resultMap="advisor" columnPrefix="a_"/>
        <collection  property="level"    resultMap="level"   columnPrefix="l_"/>
        <collection  property="tag"      resultMap="tag"     columnPrefix="t_"/>
        <collection  property="media"    resultMap="media"   columnPrefix="m_"/>
        <collection  property="children" resultMap="course"  columnPrefix="c_"/>
    </resultMap>

    <resultMap id="media" type="com.lab.hosaily.core.course.entity.Media">
        <id     column="id"          property="id"         javaType="java.lang.String"/>
        <result column="url"         property="url"        javaType="java.lang.String"/>
        <result column="type"        property="type"       typeHandler="mediaTypeHandler"/>
        <result column="remark"      property="remark"     javaType="java.lang.String"/>
        <result column="suffix"      property="suffix"     javaType="java.lang.String"/>
    </resultMap>

    <resultMap id="advisor" type="com.lab.hosaily.core.course.entity.Advisor">
        <id     column="id"           property="id"           javaType="java.lang.String"/>
        <result column="nickname"     property="nickname"     javaType="java.lang.String"/>
        <result column="wechat"       property="wechat"       javaType="java.lang.String"/>
        <result column="head_img_url" property="headImgUrl"   javaType="java.lang.String"/>
    </resultMap>

    <resultMap id="level" type="com.lab.hosaily.core.course.entity.Level">
        <id     column="id"          property="id"          javaType="java.lang.String"/>
        <result column="name"        property="name"        javaType="java.lang.String"/>
    </resultMap>

    <resultMap id="tag" type="com.lab.hosaily.core.course.entity.Tag">
        <id     column="id"          property="id"          javaType="java.lang.String"/>
        <result column="name"        property="name"        javaType="java.lang.String"/>
    </resultMap>

    <sql id="WHERE_COLUMN">
        <where>
            <if test="params.andCreiterions != null and params.andCreiterions.size > 0">
                <foreach collection="params.andCreiterions" item="criterion" separator="AND">
                    <trim prefix="(" suffix=")">
                        <choose>
                            <when test="criterion.noValue">
                                ${criterion.property} ${criterion.operator}
                            </when>
                            <when test="criterion.singleValue">
                                ${criterion.property} ${criterion.operator} #{criterion.value}
                            </when>
                            <when test="criterion.betweenValue">
                                ${criterion.property} ${criterion.operator} #{criterion.value} AND #{criterion.secondValue}
                            </when>
                            <when test="criterion.listValue">
                                ${criterion.property} ${criterion.operator}
                                <foreach collection="criterion.value" item="item" open="(" close=")" separator=",">
                                    #{item}
                                </foreach>
                            </when>
                            <when test="criterion.criterionValue">
                                <foreach collection="criterion.value" item="item" open="(" close=")" separator="criterion.operator">
                                    <trim prefix="(" suffix=")">
                                        <choose>
                                            <when test="item.noValue">
                                                ${item.property} ${item.operator}
                                            </when>
                                            <when test="item.singleValue">
                                                ${item.property} ${item.operator} #{item.value}
                                            </when>
                                            <when test="item.betweenValue">
                                                ${item.property} ${item.operator} #{item.value} AND #{item.secondValue}
                                            </when>
                                            <when test="item.listValue">
                                                ${item.property} ${item.operator}
                                                <foreach collection="item.value" item="listItem" open="(" close=")" separator=",">
                                                    #{listItem}
                                                </foreach>
                                            </when>
                                        </choose>
                                    </trim>
                                </foreach>
                            </when>
                        </choose>
                    </trim>
                </foreach>
            </if>

            <if test="params.orCreiterions != null and params.orCreiterions.size > 0">
                <foreach collection="params.orCreiterions" item="criterion" separator="AND">
                    <trim prefix="(" suffix=")">
                        <choose>
                            <when test="criterion.noValue">
                                ${criterion.property} ${criterion.operator}
                            </when>
                            <when test="criterion.singleValue">
                                ${criterion.property} ${criterion.operator} #{criterion.value}
                            </when>
                            <when test="criterion.betweenValue">
                                ${criterion.property} ${criterion.operator} #{criterion.value} AND #{criterion.secondValue}
                            </when>
                            <when test="criterion.listValue">
                                ${criterion.property} ${criterion.operator}
                                <foreach collection="criterion.value" item="item" open="(" close=")" separator=",">
                                    #{item}
                                </foreach>
                            </when>
                            <when test="criterion.criterionValue">
                                <foreach collection="criterion.value" item="item" open="(" close=")" separator="criterion.operator">
                                    <trim prefix="(" suffix=")">
                                        <choose>
                                            <when test="item.noValue">
                                                ${item.property} ${item.operator}
                                            </when>
                                            <when test="item.singleValue">
                                                ${item.property} ${item.operator} #{item.value}
                                            </when>
                                            <when test="item.betweenValue">
                                                ${item.property} ${item.operator} #{item.value} AND #{item.secondValue}
                                            </when>
                                            <when test="item.listValue">
                                                ${item.property} ${item.operator}
                                                <foreach collection="item.value" item="listItem" open="(" close=")" separator=",">
                                                    #{listItem}
                                                </foreach>
                                            </when>
                                        </choose>
                                    </trim>
                                </foreach>
                            </when>
                        </choose>
                    </trim>
                </foreach>
            </if>
        </where>
    </sql>

    <insert id="save">
        INSERT
          INTO course (
              id,
              advisor_id,
              type,
              title,
              introduction,
              cover,
              price,
              likes,
              view,
              weight,
              parent_id,
              state,
              create_time
          ) VALUE (
              #{id,           jdbcType=VARCHAR},
              #{advisor.id,   jdbcType=VARCHAR},
              #{type,         typeHandler=courseTypeHandler},
              #{title,        jdbcType=VARCHAR},
              #{introduction, jdbcType=VARCHAR},
              #{cover,        jdbcType=VARCHAR},
              #{price,        jdbcType=DOUBLE},
              #{likes,        jdbcType=INTEGER},
              #{view,         jdbcType=INTEGER},
              #{weight,       jdbcType=INTEGER},
              #{parentId,     jdbcType=VARCHAR},
              #{state,        typeHandler=usingStateHandler},
              #{createTime,   jdbcType=TIMESTAMP}
          )
    </insert>

    <update id="update">
        UPDATE course
         <set>
             <if test="advisor != null and advisor.id != null and advisor.id != ''">
                 advisor_id = #{advisor.id, jdbcType=VARCHAR},
             </if>
             <if test="type != null">
                 type = #{type, typeHandler=courseTypeHandler},
             </if>
             <if test="title != null and title != ''">
                 title = #{title, jdbcType=VARCHAR},
             </if>
             <if test="introduction != null and introduction != ''">
                 introduction = #{introduction, jdbcType=VARCHAR},
             </if>
             <if test="cover != null and cover != ''">
                 cover = #{cover, jdbcType=VARCHAR},
             </if>
             <if test="price != null and price >= 0">
                 price = #{price, jdbcType=DOUBLE},
             </if>
             <if test="likes != null and likes >= 0">
                 likes = #{likes, jdbcType=INTEGER},
             </if>
             <if test="view != null and view >= 0">
                 view = #{view, jdbcType=INTEGER},
             </if>
             <if test="weight != null and weight >= 0">
                 weight = #{weight, jdbcType=INTEGER},
             </if>
             <if test="parentId != null and parentId != ''">
                 parent_id = #{parentId, jdbcType=VARCHAR},
             </if>
             <if test="state != null">
                 state = #{state, typeHandler=usingStateHandler},
             </if>
             <if test="updateTime != null">
                 update_time = #{updateTime, jdbcType=TIMESTAMP},
             </if>
         </set>
          WHERE id = #{id}
    </update>

    <insert id="addMedia">
        INSERT
          INTO course_media (
              course_id,
              media_id
          ) VALUES
        <foreach collection="medias" item="media" separator=",">
            (
              #{courseId, jdbcType=VARCHAR},
              #{media.id, jdbcType=VARCHAR}
            )
        </foreach>
    </insert>

    <delete id="deleteMedia">
        DELETE
          FROM course_media
         WHERE course_id = #{courseId}
    </delete>

    <insert id="addTag">
        INSERT
          INTO course_tag (
              course_id,
              tag_id
        ) VALUES
        <foreach collection="tags" item="tag" separator=",">
            (
              #{courseId, jdbcType=VARCHAR},
              #{tag.id, jdbcType=VARCHAR}
            )
        </foreach>
    </insert>

    <delete id="deleteTag">
        DELETE
          FROM course_tag
         WHERE course_id = #{courseId}
    </delete>

    <insert id="addLevel">
        INSERT
          INTO course_level (
              course_id,
              level_id
        ) VALUES
        <foreach collection="levels" item="level" separator=",">
            (
              #{courseId, jdbcType=VARCHAR},
              #{level.id, jdbcType=VARCHAR}
            )
        </foreach>
    </insert>

    <delete id="deleteLevel">
        DELETE
          FROM course_tag
         WHERE course_id = #{courseId}
    </delete>

    <select id="getByParams" resultMap="course">
        SELECT c.*,
               m.id            AS m_id,
               m.url           AS m_url,
               m.type          AS m_type,
               m.remark        AS m_remark,
               m.suffix        AS m_sffix,
               a.id            AS a_id,
               a.nickname      AS a_nickname,
               a.wechat        AS a_wechat,
               a.head_img_url  AS a_head_img_url,
               l.id            AS l_id,
               l.name          AS l_name,
               t.id            AS t.id,
               t.name          AS t_name,
               ch.id           AS c_id,
               ch.title        AS ch_title,
               ch.introduction AS ch_introduction,
               ch.cover        AS ch_cover,
               ch.price        AS ch_price,
               ch.weight       AS ch.weight
     LEFT JOIN advisor a
            ON c.advisor_id = a.id
     LEFT JOIN course_media cm
            ON cm.course_id = c.id
     LEFT JOIN media a
            ON cm.media_id = a.id
     LEFT JOIN course_level cl
            ON cl.course_id = c.id
     LEFT JOIN level l
            ON cl.level_id = l.id
     LEFT JOIN course_tag ct
            ON ct.course_id = c.id
     LEFT JOIN tag t
            ON ct.tag_id = t.id
     LEFT JOIN course ch
            ON ch.parent_id = c.id
        <if test="params != null">
            <include refid="WHERE_COLUMN"/>
        </if>
    </select>

    <select id="findByParams" resultMap="course">
        SELECT *
          FROM course
        <if test="params != null">
            <include refid="WHERE_COLUMN"/>

            <if test="params.sorts != null and params.sorts.size > 0">
                ORDER BY
                <foreach collection="params.sorts" item="sort" separator=",">
                    ${sort.property} ${sort.operator}
                </foreach>
            </if>

            <if test="params.limit != null">
                ${params.limit.operator} ${params.limit.value}, ${params.limit.secondValue}
            </if>
        </if>
    </select>

    <select id="countByParams" resultType="java.lang.Long">
        SELECT COUNT(*)
          FROM course
        <if test="params != null">
            <include refid="WHERE_COLUMN"/>
        </if>
    </select>
</mapper>