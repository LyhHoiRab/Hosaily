<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.lab.hosaily.core.course.dao.mapper.PostMapper">
	<!-- 帖子 -->
    <resultMap id="post" type="com.lab.hosaily.core.course.entity.Course">
    	<id     column="id"           property="id"           javaType="java.lang.String"/>
        <result column="type"         property="type"         typeHandler="courseTypeHandler"/>
        <result column="kind"         property="kind"         typeHandler="courseKindHandler"/>
        <result column="title"        property="title"        javaType="java.lang.String"/>
        <result column="introduction" property="introduction" javaType="java.lang.String"/>
        <result column="summary"      property="summary"      javaType="java.lang.String"/>
        <result column="cover"        property="cover"        javaType="java.lang.String"/>
        <result column="price"        property="price"        javaType="java.lang.Double"/>
        <result column="likes"        property="likes"        javaType="java.lang.Integer"/>
        <result column="view"         property="view"         javaType="java.lang.Integer"/>
        <result column="sort"         property="sort"         javaType="java.lang.Integer"/>
        <result column="comments"     property="comments"     javaType="java.lang.Integer"/>
        <result column="state"        property="state"        typeHandler="usingStateHandler"/>
        <result column="create_time"  property="createTime"   javaType="java.util.Date"/>
        <result column="update_time"  property="updateTime"   javaType="java.util.Date"/>
        <association property="advisor"  resultMap="advisor"   columnPrefix="a_"/>
     	<collection property="children" resultMap="children" columnPrefix="ch_"/>
    </resultMap>

    <resultMap id="advisor" type="com.lab.hosaily.core.course.entity.Advisor">
        <id     column="id"           property="id"           javaType="java.lang.String"/>
        <result column="name"         property="name"         javaType="java.lang.String"/>
        <result column="nickname"     property="nickname"     javaType="java.lang.String"/>
        <result column="wechat"       property="wechat"       javaType="java.lang.String"/>
        <result column="head_img_url" property="headImgUrl"   javaType="java.lang.String"/>
    </resultMap>

    <resultMap id="children" type="com.lab.hosaily.core.course.entity.Course">
        <id     column="id"           property="id"           javaType="java.lang.String"/>
        <result column="cover"        property="cover"        javaType="java.lang.String"/>
        <result column="title"        property="title"        javaType="java.lang.String"/>
        <result column="summary"      property="summary"      javaType="java.lang.String"/>
    </resultMap>

    <sql id="WHERE_COLUMN">
        <where>
            <if test="params.andCreiterions != null and params.andCreiterions.size > 0">
                <foreach collection="params.andCreiterions" item="criterion" separator="AND">
                    <trim prefix="(" suffix=")">
                        <choose>
                            <when test="criterion.noValue">
                                ${criterion.property} ${criterion.operator}
                            </when>
                            <when test="criterion.singleValue">
                                ${criterion.property} ${criterion.operator} #{criterion.value}
                            </when>
                            <when test="criterion.betweenValue">
                                ${criterion.property} ${criterion.operator} #{criterion.value} AND #{criterion.secondValue}
                            </when>
                            <when test="criterion.listValue">
                                ${criterion.property} ${criterion.operator}
                                <foreach collection="criterion.value" item="item" open="(" close=")" separator=",">
                                    #{item}
                                </foreach>
                            </when>
                            <when test="criterion.criterionValue">
                                <foreach collection="criterion.value" item="item" open="(" close=")" separator="criterion.operator">
                                    <trim prefix="(" suffix=")">
                                        <choose>
                                            <when test="item.noValue">
                                                ${item.property} ${item.operator}
                                            </when>
                                            <when test="item.singleValue">
                                                ${item.property} ${item.operator} #{item.value}
                                            </when>
                                            <when test="item.betweenValue">
                                                ${item.property} ${item.operator} #{item.value} AND #{item.secondValue}
                                            </when>
                                            <when test="item.listValue">
                                                ${item.property} ${item.operator}
                                                <foreach collection="item.value" item="listItem" open="(" close=")" separator=",">
                                                    #{listItem}
                                                </foreach>
                                            </when>
                                        </choose>
                                    </trim>
                                </foreach>
                            </when>
                        </choose>
                    </trim>
                </foreach>
            </if>

            <if test="params.orCreiterions != null and params.orCreiterions.size > 0">
                <foreach collection="params.orCreiterions" item="criterion" separator="OR">
                    <trim prefix="(" suffix=")">
                        <choose>
                            <when test="criterion.noValue">
                                ${criterion.property} ${criterion.operator}
                            </when>
                            <when test="criterion.singleValue">
                                ${criterion.property} ${criterion.operator} #{criterion.value}
                            </when>
                            <when test="criterion.betweenValue">
                                ${criterion.property} ${criterion.operator} #{criterion.value} AND #{criterion.secondValue}
                            </when>
                            <when test="criterion.listValue">
                                ${criterion.property} ${criterion.operator}
                                <foreach collection="criterion.value" item="item" open="(" close=")" separator=",">
                                    #{item}
                                </foreach>
                            </when>
                            <when test="criterion.criterionValue">
                                <foreach collection="criterion.value" item="item" open="(" close=")" separator="criterion.operator">
                                    <trim prefix="(" suffix=")">
                                        <choose>
                                            <when test="item.noValue">
                                                ${item.property} ${item.operator}
                                            </when>
                                            <when test="item.singleValue">
                                                ${item.property} ${item.operator} #{item.value}
                                            </when>
                                            <when test="item.betweenValue">
                                                ${item.property} ${item.operator} #{item.value} AND #{item.secondValue}
                                            </when>
                                            <when test="item.listValue">
                                                ${item.property} ${item.operator}
                                                <foreach collection="item.value" item="listItem" open="(" close=")" separator=",">
                                                    #{listItem}
                                                </foreach>
                                            </when>
                                        </choose>
                                    </trim>
                                </foreach>
                            </when>
                        </choose>
                    </trim>
                </foreach>
            </if>
        </where>
    </sql>

    <insert id="save">
    	INSERT
    	  INTO course (
               id,
               type,
               kind,
               title,
               introduction,
               summary,
               cover,
               price,
               likes,
               view,
               sort,
               comments,
               state,
               advisor_id,
               create_time
	  	) VALUE (
               #{id,           jdbcType=VARCHAR},
               #{type,         typeHandler=courseTypeHandler},
               #{kind,         typeHandler=courseKindHandler},
               #{title,        jdbcType=VARCHAR},
               #{introduction, jdbcType=VARCHAR},
               #{summary,      jdbcType=VARCHAR},
               #{cover,        jdbcType=VARCHAR},
               #{price,        jdbcType=DOUBLE},
               #{likes,        jdbcType=INTEGER},
               #{view,         jdbcType=INTEGER},
               #{sort,         jdbcType=INTEGER},
               #{comments,     jdbcType=INTEGER},
               #{state,        typeHandler=usingStateHandler},
               #{advisor.id,   jdbcType=VARCHAR},
               #{createTime,   jdbcType=TIMESTAMP}
        )
    </insert>

    <update id="update">
        UPDATE course
         <set>
             <if test="title != null and title != ''">
                 title = #{title, jdbcType=VARCHAR},
             </if>
             <if test="introduction != null and introduction != ''">
                 introduction = #{introduction, jdbcType=VARCHAR},
             </if>
             <if test="summary != null and summary != ''">
                 summary = #{summary, jdbcType=VARCHAR},
             </if>
             <if test="cover != null and cover != ''">
                 cover = #{cover, jdbcType=VARCHAR},
             </if>
             <if test="price != null and price >= 0">
                 price = #{price, jdbcType=BOOLEAN},
             </if>
             <if test="likes != null and likes >= 0">
                 likes = #{likes, jdbcType=INTEGER},
             </if>
             <if test="view != null and view >= 0">
                 view = #{view, jdbcType=INTEGER},
             </if>
             <if test="sort != null and sort >= 0">
                 sort = #{sort, jdbcType=INTEGER},
             </if>
             <if test="comments != null and comments >= 0">
                 comments = #{comments, jdbcType=INTEGER},
             </if>
             <if test="state != null">
                 state = #{state, typeHandler=usingStateHandler},
             </if>
             <if test="updateTime != null">
                 update_time = #{updateTime, jdbcType=VARCHAR},
             </if>
         </set>
          WHERE id = #{id}
    </update>

    <insert id="addCourse">
        INSERT
          INTO course_course (
               parent_id,
               children_id
        ) VALUES
          <foreach collection="children" item="child" separator=",">
            (
              #{parentId, jdbcType=VARCHAR},
              #{child.id, jdbcType=VARCHAR}
            )
          </foreach>
    </insert>

    <delete id="deleteCourse">
        DELETE
          FROM course_course
         WHERE parent_id = #{parentId}
    </delete>

    <select id="getByParams" resultMap="post">
        SELECT c.*,
               a.id            AS a_id,
               a.nickname      AS a_nickname,
               a.wechat        AS a_wechat,
               a.head_img_url  AS a_head_img_url,
               ch.id           AS ch_id,
               ch.title        AS ch_title,
               ch.summary      AS ch_summary,
               ch.cover        AS ch_cover
          FROM course c
     LEFT JOIN advisor a
            ON c.advisor_id = a.id
     LEFT JOIN course_course cc
            ON cc.parent_id = c.id
     LEFT JOIN course ch
            ON ch.id = cc.children_id
        <if test="params != null">
            <include refid="WHERE_COLUMN"/>
        </if>
    </select>

    <select id="findIdByParams" resultType="String">
        SELECT c.id
          FROM course c
     LEFT JOIN advisor a
            ON c.advisor_id = a.id
     LEFT JOIN course_course cc
            ON cc.parent_id = c.id
     LEFT JOIN course ch
            ON ch.id = cc.children_id
        <if test="params != null">
            <include refid="WHERE_COLUMN"/>

            <if test="params.groups != null and params.groups.size > 0">
                GROUP BY
                <foreach collection="params.groups" item="group" separator=",">
                    ${group.property}
                </foreach>
            </if>

            <if test="params.sorts != null and params.sorts.size > 0">
                ORDER BY
                <foreach collection="params.sorts" item="sort" separator=",">
                    ${sort.property} ${sort.operator}
                </foreach>
            </if>

            <if test="params.limit != null">
                ${params.limit.operator} ${params.limit.value}, ${params.limit.secondValue}
            </if>
        </if>
    </select>

    <select id="findByParams" resultMap="post">
        SELECT c.*,
               a.id            AS a_id,
               a.nickname      AS a_nickname,
               a.wechat        AS a_wechat,
               a.head_img_url  AS a_head_img_url,
               ch.id           AS ch_id,
               ch.title        AS ch_title,
               ch.summary      AS ch_summary,
               ch.cover        AS ch_cover
          FROM course c
     LEFT JOIN advisor a
            ON c.advisor_id = a.id
     LEFT JOIN course_course cc
            ON cc.parent_id = c.id
     LEFT JOIN course ch
            ON ch.id = cc.children_id
        <if test="params != null">
            <include refid="WHERE_COLUMN"/>

            <if test="params.groups != null and params.groups.size > 0">
                GROUP BY
                <foreach collection="params.groups" item="group" separator=",">
                    ${group.property}
                </foreach>
            </if>

            <if test="params.sorts != null and params.sorts.size > 0">
                ORDER BY
                <foreach collection="params.sorts" item="sort" separator=",">
                    ${sort.property} ${sort.operator}
                </foreach>
            </if>

            <if test="params.limit != null">
                ${params.limit.operator} ${params.limit.value}, ${params.limit.secondValue}
            </if>
        </if>
    </select>

    <select id="countByParams" resultType="java.lang.Long">
        SELECT COUNT(*)
          FROM (
                  SELECT c.id
                    FROM course c
               LEFT JOIN advisor a
                      ON c.advisor_id = a.id
               LEFT JOIN course_course cc
                      ON cc.parent_id = c.id
               LEFT JOIN course ch
                      ON ch.id = cc.children_id
                <if test="params != null">
                    <include refid="WHERE_COLUMN"/>

                    <if test="params.groups != null and params.groups.size > 0">
                        GROUP BY
                        <foreach collection="params.groups" item="group" separator=",">
                            ${group.property}
                        </foreach>
                    </if>
                </if>
        ) AS course
    </select>
</mapper>