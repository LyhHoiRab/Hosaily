<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.lab.hosaily.core.client.dao.mapper.AgreementMapper">
    <resultMap id="agreement" type="com.lab.hosaily.core.client.entity.Agreement">
        <id     column="id"                  property="id"               javaType="java.lang.String"/>
        <result column="purchase_id"         property="purchaseId"       javaType="java.lang.String"/>
        <result column="account_id"          property="accountId"        javaType="java.lang.String"/>
        <result column="client"              property="client"           javaType="java.lang.String"/>
        <result column="phone"               property="phone"            javaType="java.lang.String"/>
        <result column="address"             property="address"          javaType="java.lang.String"/>
        <result column="id_card"             property="idCard"           javaType="java.lang.String"/>
        <result column="wechat"              property="wechat"           javaType="java.lang.String"/>
        <result column="email"               property="email"            javaType="java.lang.String"/>
        <result column="emergency_contact"   property="emergencyContact" javaType="java.lang.String"/>
        <result column="company"             property="company"          javaType="java.lang.String"/>
        <result column="license_number"      property="licenseNumber"    javaType="java.lang.String"/>
        <result column="legal_person"        property="legalPerson"      javaType="java.lang.String"/>
        <result column="company_address"     property="companyAddress"   javaType="java.lang.String"/>
        <result column="company_phone"       property="companyPhone"     javaType="java.lang.String"/>
        <result column="company_email"       property="companyEmail"     javaType="java.lang.String"/>
        <result column="company_website"     property="companyWebsite"   javaType="java.lang.String"/>
        <result column="affirm_time"         property="affirmTime"       javaType="java.util.Date"/>
        <result column="version"             property="version"          javaType="java.lang.Integer"/>
        <result column="retail"              property="retail"           javaType="java.lang.Double"/>
        <result column="price"               property="price"            javaType="java.lang.Double"/>
        <result column="duration"            property="duration"         javaType="java.lang.Integer"/>
        <result column="state"               property="state"            typeHandler="agreementStateHandler"/>
        <result column="create_time"         property="createTime"       javaType="java.util.Date"/>
        <result column="update_time"         property="updateTime"       javaType="java.util.Date"/>
        <result column="autograph_url"       property="autographUrl"     javaType="java.lang.String"/>
        <result column="service_id"          property="serviceId"        javaType="java.lang.String"/>
        <result column="state"               property="state"            typeHandler="agreementStateHandler"/>
        <result column="edit"                property="edit"             javaType="java.lang.Boolean"/>
        <result column="name"                property="name"             javaType="java.lang.String"/>
        <result column="client_head_img_url" property="clientHeadImgUrl" javaType="java.lang.String"/>
        <result column="client_nickname"     property="clientNickname"   javaType="java.lang.String"/>
        <collection  property="services"  resultMap="service"   columnPrefix="s_"/>
    </resultMap>

    <resultMap id="service" type="com.lab.hosaily.core.product.entity.Service">
        <id     column="id"             property="id"           javaType="java.lang.String"/>
        <result column="master_id"      property="masterId"     javaType="java.lang.String"/>
        <result column="name"           property="name"         javaType="java.lang.String"/>
        <result column="description"    property="description"  javaType="java.lang.String"/>
        <result column="time"           property="time"         javaType="java.lang.Integer"/>
        <result column="unit_price"     property="unitPrice"    javaType="java.lang.Double"/>
        <result column="type"           property="type"         typeHandler="serviceTypeHandler"/>
        <result column="sort"           property="sort"         javaType="java.lang.Integer"/>
    </resultMap>

    <sql id="WHERE_COLUMN">
        <where>
            <if test="params.andCriterions != null and params.andCriterions.size > 0">
                <foreach collection="params.andCriterions" item="criterion">
                    <trim prefix="AND (" suffix=")">
                        <choose>
                            <when test="criterion.noValue">
                                ${criterion.property} ${criterion.operator}
                            </when>
                            <when test="criterion.singleValue">
                                ${criterion.property} ${criterion.operator} #{criterion.value}
                            </when>
                            <when test="criterion.betweenValue">
                                ${criterion.property} ${criterion.operator} #{criterion.value} AND #{criterion.secondValue}
                            </when>
                            <when test="criterion.listValue">
                                ${criterion.property} ${criterion.operator}
                                <foreach collection="criterion.value" item="item" open="(" close=")" separator=",">
                                    #{item}
                                </foreach>
                            </when>
                            <when test="criterion.andCriterionValue">
                                <foreach collection="criterion.value" item="item" open="(" close=")" separator="AND">
                                    <trim prefix="(" suffix=")">
                                        <choose>
                                            <when test="item.noValue">
                                                ${item.property} ${item.operator}
                                            </when>
                                            <when test="item.singleValue">
                                                ${item.property} ${item.operator} #{item.value}
                                            </when>
                                            <when test="item.betweenValue">
                                                ${item.property} ${item.operator} #{item.value} AND #{item.secondValue}
                                            </when>
                                            <when test="item.listValue">
                                                ${item.property} ${item.operator}
                                                <foreach collection="item.value" item="itemValue" open="(" close=")" separator=",">
                                                    #{itemValue}
                                                </foreach>
                                            </when>
                                        </choose>
                                    </trim>
                                </foreach>
                            </when>
                            <when test="criterion.orCriterionValue">
                                <foreach collection="criterion.value" item="item" open="(" close=")" separator="OR">
                                    <trim prefix="(" suffix=")">
                                        <choose>
                                            <when test="item.noValue">
                                                ${item.property} ${item.operator}
                                            </when>
                                            <when test="item.singleValue">
                                                ${item.property} ${item.operator} #{item.value}
                                            </when>
                                            <when test="item.betweenValue">
                                                ${item.property} ${item.operator} #{item.value} AND #{item.secondValue}
                                            </when>
                                            <when test="item.listValue">
                                                ${item.property} ${item.operator}
                                                <foreach collection="item.value" item="itemValue" open="(" close=")" separator=",">
                                                    #{itemValue}
                                                </foreach>
                                            </when>
                                        </choose>
                                    </trim>
                                </foreach>
                            </when>
                        </choose>
                    </trim>
                </foreach>
            </if>

            <if test="params.orCriterions != null and params.orCriterions.size > 0">
                <foreach collection="params.orCriterions" item="criterion">
                    <trim prefix="OR (" suffix=")">
                        <choose>
                            <when test="criterion.noValue">
                                ${criterion.property} ${criterion.operator}
                            </when>
                            <when test="criterion.singleValue">
                                ${criterion.property} ${criterion.operator} #{criterion.value}
                            </when>
                            <when test="criterion.betweenValue">
                                ${criterion.property} ${criterion.operator} #{criterion.value} AND #{criterion.secondValue}
                            </when>
                            <when test="criterion.listValue">
                                ${criterion.property} ${criterion.operator}
                                <foreach collection="criterion.value" item="item" open="(" close=")" separator=",">
                                    #{item}
                                </foreach>
                            </when>
                            <when test="criterion.andCriterionValue">
                                <foreach collection="criterion.value" item="item" open="(" close=")" separator="AND">
                                    <trim prefix="(" suffix=")">
                                        <choose>
                                            <when test="item.noValue">
                                                ${item.property} ${item.operator}
                                            </when>
                                            <when test="item.singleValue">
                                                ${item.property} ${item.operator} #{item.value}
                                            </when>
                                            <when test="item.betweenValue">
                                                ${item.property} ${item.operator} #{item.value} AND #{item.secondValue}
                                            </when>
                                            <when test="item.listValue">
                                                ${item.property} ${item.operator}
                                                <foreach collection="item.value" item="itemValue" open="(" close=")" separator=",">
                                                    #{itemValue}
                                                </foreach>
                                            </when>
                                        </choose>
                                    </trim>
                                </foreach>
                            </when>
                            <when test="criterion.orCriterionValue">
                                <foreach collection="criterion.value" item="item" open="(" close=")" separator="OR">
                                    <trim prefix="(" suffix=")">
                                        <choose>
                                            <when test="item.noValue">
                                                ${item.property} ${item.operator}
                                            </when>
                                            <when test="item.singleValue">
                                                ${item.property} ${item.operator} #{item.value}
                                            </when>
                                            <when test="item.betweenValue">
                                                ${item.property} ${item.operator} #{item.value} AND #{item.secondValue}
                                            </when>
                                            <when test="item.listValue">
                                                ${item.property} ${item.operator}
                                                <foreach collection="item.value" item="itemValue" open="(" close=")" separator=",">
                                                    #{itemValue}
                                                </foreach>
                                            </when>
                                        </choose>
                                    </trim>
                                </foreach>
                            </when>
                        </choose>
                    </trim>
                </foreach>
            </if>
        </where>
    </sql>

    <insert id="save">
        INSERT
          INTO agreement (
               id,
               purchase_id,
               account_id,
               client,
               phone,
               address,
               id_card,
               wechat,
               email,
               emergency_contact,
               company,
               license_number,
               legal_person,
               company_address,
               company_phone,
               company_email,
               company_website,
               affirm_time,
               version,
               state,
               create_time,
               retail,
               price,
               duration,
               autograph_url,
               service_id,
               name,
               client_head_img_url,
               client_nickname
        ) VALUE (
               #{id,                jdbcType=VARCHAR},
               #{purchaseId,        jdbcType=VARCHAR},
               #{accountId,         jdbcType=VARCHAR},
               #{client,            jdbcType=VARCHAR},
               #{phone,             jdbcType=VARCHAR},
               #{address,           jdbcType=VARCHAR},
               #{idCard,            jdbcType=VARCHAR},
               #{wechat,            jdbcType=VARCHAR},
               #{email,             jdbcType=VARCHAR},
               #{emergencyContact,  jdbcType=VARCHAR},
               #{company,           jdbcType=VARCHAR},
               #{licenseNumber,     jdbcType=VARCHAR},
               #{legalPerson,       jdbcType=VARCHAR},
               #{companyAddress,    jdbcType=VARCHAR},
               #{companyPhone,      jdbcType=VARCHAR},
               #{companyEmail,      jdbcType=VARCHAR},
               #{companyWebsite,    jdbcType=VARCHAR},
               #{affirmTime,        jdbcType=TIMESTAMP},
               (SELECT MAX(version) FROM contract),
               #{state,             typeHandler=agreementStateHandler},
               #{createTime,        jdbcType=TIMESTAMP},
               #{retail,            jdbcType=DOUBLE},
               #{price,             jdbcType=DOUBLE},
               #{duration,          jdbcType=INTEGER},
               #{autographUrl,      jdbcType=VARCHAR},
               #{serviceId,         jdbcType=VARCHAR},
               #{name,              jdbcType=VARCHAR},
               #{clientHeadImgUrl,  jdbcType=VARCHAR},
               #{clientNickname,    jdbcType=VARCHAR}
        )
    </insert>

    <update id="update">
        UPDATE agreement
         <set>
             <if test="purchaseId != null and purchaseId != ''">
                 purchase_id = #{purchaseId, jdbcType=VARCHAR},
             </if>
             <if test="accountId != null and accountId != ''">
                 account_id = #{accountId, jdbcType=VARCHAR},
             </if>
             <if test="client != null">
                 client = #{client, jdbcType=VARCHAR},
             </if>
             <if test="phone != null">
                 phone = #{phone, jdbcType=VARCHAR},
             </if>
             <if test="address != null">
                 address = #{address, jdbcType=VARCHAR},
             </if>
             <if test="idCard != null">
                 id_card = #{idCard, jdbcType=VARCHAR},
             </if>
             <if test="wechat != null">
                 wechat = #{wechat, jdbcType=VARCHAR},
             </if>
             <if test="email != null">
                 email = #{email, jdbcType=VARCHAR},
             </if>
             <if test="emergencyContact != null">
                 emergency_contact = #{emergencyContact, jdbcType=VARCHAR},
             </if>
             <if test="company != null">
                 company = #{company, jdbcType=VARCHAR},
             </if>
             <if test="licenseNumber != null">
                 license_number = #{licenseNumber, jdbcType=VARCHAR},
             </if>
             <if test="legalPerson != null">
                 legal_person = #{legalPerson, jdbcType=VARCHAR},
             </if>
             <if test="companyAddress != null">
                 company_address = #{companyAddress, jdbcType=VARCHAR},
             </if>
             <if test="companyPhone != null">
                 company_phone = #{companyPhone, jdbcType=VARCHAR},
             </if>
             <if test="companyEmail != null">
                 company_email = #{companyEmail, jdbcType=VARCHAR},
             </if>
             <if test="companyWebsite != null">
                 company_website = #{companyWebsite, jdbcType=VARCHAR},
             </if>
             <if test="affirmTime != null">
                 affirm_time = #{affirmTime, jdbcType=TIMESTAMP},
             </if>
             <if test="version != null">
                 version = #{version, jdbcType=INTEGER},
             </if>
             <if test="state != null">
                 state = #{state, typeHandler=agreementStateHandler},
             </if>
             <if test="updateTime != null">
                 update_time = #{updateTime, jdbcType=TIMESTAMP},
             </if>
             <if test="retail != null and retail >= 0">
                 retail = #{retail, jdbcType=DOUBLE},
             </if>
             <if test="price != null and price >= 0">
                 price = #{price, jdbcType=DOUBLE},
             </if>
             <if test="duration != null and duration >= 0">
                 duration = #{duration, jdbcType=INTEGER},
             </if>
             <if test="autographUrl != null">
                 autograph_url = #{autographUrl, jdbcType=VARCHAR},
             </if>
             <if test="serviceId != null">
                 service_id = #{serviceId, jdbcType=VARCHAR},
             </if>
             <if test="edit != null">
                 edit = #{edit, jdbcType=BOOLEAN},
             </if>
             <if test="name != null">
                 name = #{name, jdbcType=VARCHAR},
             </if>
             <if test="clientHeadImgUrl != null">
                 client_head_img_url = #{clientHeadImgUrl, jdbcType=VARCHAR},
             </if>
             <if test="clientNickname != null">
                 client_nickname = #{clientNickname, jdbcType=VARCHAR},
             </if>
         </set>
          WHERE id = #{id}
    </update>

    <select id="getByParams" resultMap="agreement">
        SELECT a.*,
               s.name               AS s_name,
               s.description        AS s_description,
               s.time               AS s_time,
               s.unit_price         AS s_unit_price,
               s.type               AS s_type,
               s.sort               AS s_sort
          FROM agreement a
     LEFT JOIN service s
            ON s.master_id = a.id
        <if test="params != null">
            <include refid="WHERE_COLUMN"/>
        </if>
    </select>

    <select id="findByParams" resultMap="agreement">
        SELECT *
          FROM agreement
        <if test="params != null">
            <include refid="WHERE_COLUMN"/>

            <if test="params.groups != null and params.groups.size > 0">
                GROUP BY
                <foreach collection="params.groups" item="group" separator=",">
                    ${group.property}
                </foreach>
            </if>

            <if test="params.sorts != null and params.sorts.size > 0">
                ORDER BY
                <foreach collection="params.sorts" item="sort" separator=",">
                    ${sort.property} ${sort.operator}
                </foreach>
            </if>

            <if test="params.limit != null">
                ${params.limit.operator} ${params.limit.value}, ${params.limit.secondValue}
            </if>
        </if>
    </select>

    <select id="countByParams" resultType="java.lang.Long">
        SELECT COUNT(*)
          FROM agreement
        <if test="params != null">
            <include refid="WHERE_COLUMN"/>
        </if>
    </select>
</mapper>