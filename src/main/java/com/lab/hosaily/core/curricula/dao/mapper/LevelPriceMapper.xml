<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.lab.hosaily.core.curricula.dao.mapper.LevelPriceMapper">
    <resultMap id="price" type="com.lab.hosaily.core.curricula.entity.LevelPrice">
        <id     column="id"          property="id"         javaType="java.lang.String"/>
        <result column="level_id"    property="levelId"    javaType="java.lang.String"/>
        <result column="price"       property="price"      javaType="java.lang.Double"/>
        <result column="effective"   property="effective"  javaType="java.lang.Integer"/>
        <result column="state"       property="state"      typeHandler="usingStateHandler"/>
        <result column="create_time" property="createTime" javaType="java.util.Date"/>
        <result column="update_time" property="updateTime" javaType="java.util.Date"/>
    </resultMap>

    <sql id="WHERE_COLUMN">
        <where>
            <if test="params.andCreiterions != null and params.andCreiterions.size > 0">
                <foreach collection="params.andCreiterions" item="criterion" separator="AND">
                    <trim prefix="(" suffix=")">
                        <choose>
                            <when test="criterion.noValue">
                                ${criterion.property} ${criterion.operator}
                            </when>
                            <when test="criterion.singleValue">
                                ${criterion.property} ${criterion.operator} #{criterion.value}
                            </when>
                            <when test="criterion.betweenValue">
                                ${criterion.property} ${criterion.operator} #{criterion.value} AND #{criterion.secondValue}
                            </when>
                            <when test="criterion.listValue">
                                ${criterion.property} ${criterion.operator}
                                <foreach collection="criterion.value" item="item" open="(" close=")" separator=",">
                                    #{item}
                                </foreach>
                            </when>
                            <when test="criterion.criterionValue">
                                <foreach collection="criterion.value" item="item" open="(" close=")" separator="criterion.operator">
                                    <trim prefix="(" suffix=")">
                                        <choose>
                                            <when test="item.noValue">
                                                ${item.property} ${item.operator}
                                            </when>
                                            <when test="item.singleValue">
                                                ${item.property} ${item.operator} #{item.value}
                                            </when>
                                            <when test="item.betweenValue">
                                                ${item.property} ${item.operator} #{item.value} AND #{item.secondValue}
                                            </when>
                                            <when test="item.listValue">
                                                ${item.property} ${item.operator}
                                                <foreach collection="item.value" item="listItem" open="(" close=")" separator=",">
                                                    #{listItem}
                                                </foreach>
                                            </when>
                                        </choose>
                                    </trim>
                                </foreach>
                            </when>
                        </choose>
                    </trim>
                </foreach>
            </if>

            <if test="params.orCreiterions != null and params.orCreiterions.size > 0">
                <foreach collection="params.orCreiterions" item="criterion" separator="AND">
                    <trim prefix="(" suffix=")">
                        <choose>
                            <when test="criterion.noValue">
                                ${criterion.property} ${criterion.operator}
                            </when>
                            <when test="criterion.singleValue">
                                ${criterion.property} ${criterion.operator} #{criterion.value}
                            </when>
                            <when test="criterion.betweenValue">
                                ${criterion.property} ${criterion.operator} #{criterion.value} AND #{criterion.secondValue}
                            </when>
                            <when test="criterion.listValue">
                                ${criterion.property} ${criterion.operator}
                                <foreach collection="criterion.value" item="item" open="(" close=")" separator=",">
                                    #{item}
                                </foreach>
                            </when>
                            <when test="criterion.criterionValue">
                                <foreach collection="criterion.value" item="item" open="(" close=")" separator="criterion.operator">
                                    <trim prefix="(" suffix=")">
                                        <choose>
                                            <when test="item.noValue">
                                                ${item.property} ${item.operator}
                                            </when>
                                            <when test="item.singleValue">
                                                ${item.property} ${item.operator} #{item.value}
                                            </when>
                                            <when test="item.betweenValue">
                                                ${item.property} ${item.operator} #{item.value} AND #{item.secondValue}
                                            </when>
                                            <when test="item.listValue">
                                                ${item.property} ${item.operator}
                                                <foreach collection="item.value" item="listItem" open="(" close=")" separator=",">
                                                    #{listItem}
                                                </foreach>
                                            </when>
                                        </choose>
                                    </trim>
                                </foreach>
                            </when>
                        </choose>
                    </trim>
                </foreach>
            </if>
        </where>
    </sql>

    <insert id="save">
        INSERT
          INTO level_price (
              id,
              level_id,
              price,
              effective,
              state,
              create_time
          ) VALUE (
              #{id,         jdbcType=VARCHAR},
              #{levelId,    jdbcType=VARCHAR},
              #{price,      jdbcType=DOUBLE},
              #{effective,  jdbcType=INTEGER},
              #{state,      typeHandler=usingStateHandler},
              #{createTime, jdbcType=TIMESTAMP}
          )
    </insert>

    <insert id="saveByBatch">
        INSERT
          INTO level_price (
              id,
              level_id,
              price,
              effective,
              state,
              create_time
          ) VALUES
          <foreach collection="prices" item="price" separator=",">
              (
                  #{price.id,         jdbcType=VARCHAR},
                  #{price.levelId,    jdbcType=VARCHAR},
                  #{price.price,      jdbcType=DOUBLE},
                  #{price.effective,  jdbcType=INTEGER},
                  #{price.state,      typeHandler=usingStateHandler},
                  #{price.createTime, jdbcType=TIMESTAMP}
              )
          </foreach>
    </insert>

    <update id="update">
        UPDATE level_price
         <set>
             <if test="price != null and price >= 0">
                 price = #{price, jdbcType=DOUBLE},
             </if>
             <if test="effective != null and effective >= 0">
                 effective = #{effective, jdbcType=INTEGER},
             </if>
             <if test="state != null">
                 state = #{state, typeHandler=usingStateHandler},
             </if>
             <if test="updateTime != null">
                 update_time = #{updateTime, jdbcType=TIMESTAMP},
             </if>
         </set>
          WHERE id = #{id}
    </update>

    <update id="updateByBatch">
        <foreach collection="prices" item="price" separator=";">
            UPDATE level_price
            <set>
                <if test="price.price != null and price.price >= 0">
                    price = #{price.price, jdbcType=DOUBLE},
                </if>
                <if test="price.effective != null and price.effective >= 0">
                    effective = #{price.effective, jdbcType=INTEGER},
                </if>
                <if test="price.state != null">
                    state = #{price.state, typeHandler=usingStateHandler},
                </if>
                <if test="price.updateTime != null">
                    update_time = #{price.updateTime, jdbcType=TIMESTAMP},
                </if>
            </set>
            WHERE id = #{price.id}
        </foreach>
    </update>

    <delete id="delete">
        DELETE
          FROM level_price
         WHERE id = #{id}
    </delete>

    <select id="getByParams" resultMap="price">
        SELECT *
          FROM level_price
        <if test="params != null">
            <include refid="WHERE_COLUMN"/>
        </if>
    </select>

    <select id="findByParams" resultMap="price">
        SELECT *
          FROM level_price
        <if test="params != null">
            <include refid="WHERE_COLUMN"/>

            <if test="params.sorts != null and params.sorts.size > 0">
                ORDER BY
                <foreach collection="params.sorts" item="sort" separator=",">
                    ${sort.property} ${sort.operator}
                </foreach>
            </if>

            <if test="params.limit != null">
                ${params.limit.operator} ${params.limit.value}, ${params.limit.secondValue}
            </if>
        </if>
    </select>

    <select id="countByParams" resultType="java.lang.Long">
        SELECT COUNT(*)
          FROM level_price
        <if test="params != null">
            <include refid="WHERE_COLUMN"/>
        </if>
    </select>
</mapper>